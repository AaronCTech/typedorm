import {MetadataManager} from '@typedorm/common/metadata-manager';
import {AttributeMetadata} from '../metadata/attribute-metadata';
import {AutoGeneratedAttributeMetadata} from '../metadata/auto-generated-attribute-metadata';
import {EntityMetadata} from '../metadata/entity-metadata';
import {IsAutoGeneratedAttributeMetadata} from './../metadata/auto-generated-attribute-metadata';
import {Connection} from './connection';

export class EntityMetadataBuilder {
  constructor(private connection: Connection) {}
  build(entityClasses: Function[]): EntityMetadata[] {
    return entityClasses.map(entity => {
      const getRawAttributesForEntity = MetadataManager.metadataStorage.getRawAttributesForEntity(
        entity
      );

      const attributesMetadata = getRawAttributesForEntity.map(attr => {
        if (IsAutoGeneratedAttributeMetadata(attr)) {
          return new AutoGeneratedAttributeMetadata({
            ...attr,
            connection: this.connection,
          });
        }

        return new AttributeMetadata({
          connection: this.connection,
          ...attr,
        });
      });

      const {
        target,
        table,
        name,
        primaryKey,
        indexes,
      } = MetadataManager.metadataStorage.getRawEntityByTarget(entity);

      // At the moment we do simple store metadata and retrieve for entities,
      // this however needs to support extending Entity
      // TODO: add support for concatenating attributes for all inherited entities
      return new EntityMetadata({
        connection: this.connection,
        table,
        target,
        attributes: attributesMetadata,
        name,
        primaryKey,
        indexes,
      });
    });
  }
}
